if(View.omni)
	return;

include "utils.tis";

namespace Omni
{
	function openConsole() {}
	function colorpick() {}

	property show_tree_timing(val) {}
}

namespace console
{
	const omni = Omni;

	function log(params..)
	{
		stdout.println(params.join(" "));
	}
	function plog(params..)
	{
		self.post(::log.apply(undefined, params));
	}

	function trace(params..)
	{
		var tracewnd = View.tracewnd;
		if(!tracewnd || tracewnd.windowState != View.WINDOW_SHOWN)
		{
			tracewnd = view.window({
				type: View.TOOL_WINDOW,
				url: "sciter:tracewnd.html",
				alignment: 5
			});
		}
		tracewnd.root.ns.View_AppendLine(params.join(" "));
		View.tracewnd = tracewnd;
	}
	function ptrace(params..)
	{
		self.post(::trace.apply(undefined, params));
	}
	
	function count()
	{
		var caller = __TRACE__[1];
		var id = caller.toString();
		if(ns_count_funcs.exists(id))
			ns_count_funcs[id]++;
		else
			ns_count_funcs[id] = 1;
		log(caller[1] + ": " + ns_count_funcs[id]);
	}
	function tcount()
	{
		var caller = __TRACE__[1];
		var id = caller.toString();
		if(ns_tcount_funcs.exists(id))
			ns_tcount_funcs[id]++;
		else
			ns_tcount_funcs[id] = 1;
		trace(caller[1] + ": " + ns_tcount_funcs[id]);
	}

	function foreach(param)
	{
		for(var (k,v) in param)
			log(k + ":", v);
		otherwise
			stderr.println("console.foreach() found nothing");
	}

	function time(name=undefined)
	{
		if(name!=undefined && typeof name != #string)
			throw "Not a String (" + name +")";

		ns_bench_timers[name ? name : #last_timer] = System.ticks;
	}

	function timeEnd(name=undefined)
	{
		if(name!=undefined && typeof name != #string)
			throw "Not a String (" + name +")";

		name = name ? name : #last_timer;
		var before = ns_bench_timers[name];
		if(before==undefined)
			throw "Timer named '" + name + "' was not started with console.time()";
		delete ns_bench_timers[name];

		var total = System.ticks - before;
		if(typeof name == #symbol)
			log("timeEnd: " + total + "ms");
		else
			log("timeEnd (" + name + "): " + total + "ms");
	}

	function showMemStats(msg="")
	{
		var (total,free, used) = gc();
		log("heap %s total=%d free=%d used=%d bytes\n", msg, total, free, used);
	}

	function stackTrace()
	{
		var arr_trace = __TRACE__;
		arr_trace.shift();

		log("Stack trace:");
		for(var frame in arr_trace)
			log("\t" + frame[1] + ", " + frame[2] + ", line " + frame[0]);
	}

	// Omni ONLY
	function show(el) {}
	function dom(el) {}
	function colorpick(el, css_prop) {}
	function colortouch(el, what=#bg, mode=#hue-saturation) {}
	function texturepick(el, what=#bg) {}
	function fontpick(el) {}
	function mypick(cbk_creator = undefined, el = undefined) {}


	// ------------------------------------------------------
	const ns_popups = [];
	const ns_count_funcs = {};
	const ns_tcount_funcs = {};
	const ns_bench_timers = {};
}

function DummyAspect()
{
}


// aliases
//var Omni = View.omnidata;

const log = console.log;
const plog = console.plog;
const trace = console.trace;// OMNI only
const ptrace = console.ptrace;
const count = console.count;